/**
 * path.h
 *
 * Copyright (c) 2021 Yuriy Lisovskiy
 *
 * Platform-dependent includes of path utilities.
 */

#pragma once

// C++ libraries.
#include <memory>

// Base libraries.
#include "./sys.h"
#include "./file.h"

#ifdef __unix__

#include "./_path/posix.h"

#endif // __unix__

#ifdef __windows__

#include "./_path/nt.h"

#endif // __windows__

#ifdef __mac__

#include "./_path/mac.h"

#endif // __mac__


__PATH_BEGIN__

// Split a path in root and extension.
// The extension is everything starting at the last dot in the last
// pathname component; the root is everything before that.
// It is always true that `root + ext == p`.
inline void split_text(const std::string& full_path, std::string& root_out, std::string& ext_out)
{
	return _split_text(full_path, path_sep, alt_sep, ext_sep, root_out, ext_out);
}

// TESTME: prefix_and_suffix
// 'prefix_and_suffix' splits pattern by the last wildcard "*", if applicable,
// returning prefix as the part before "*" and suffix as the part after "*".
extern std::pair<std::string, std::string> prefix_and_suffix(const std::string& pattern);

// TESTME: reseed
extern int reseed();

// TESTME: next_random
extern std::string next_random();

// TESTME: temp_file
// 'temp_file' creates a new temporary file in the directory dir,
// opens the file for reading and writing, and returns the resulting
// 'std::unique_ptr<File>'.
// The filename is generated by taking pattern and adding a random
// string to the end. If pattern includes a "*", the random string
// replaces the last "*".
// If dir is the empty string, 'temp_file' uses the default directory
// for temporary files (see 'std::filesystem::temp_directory_path()').
// Multiple programs calling 'temp_file' simultaneously
// will not choose the same file. The caller can use 'file.path()'
// to find the pathname of the file. It is the caller's responsibility
// to remove the file when no longer needed.
extern std::unique_ptr<File> temp_file(std::string dir, const std::string& pattern, bool is_binary);

__PATH_END__
