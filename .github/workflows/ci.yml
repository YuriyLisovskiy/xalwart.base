name: "ci"
on:
  pull_request:
  push:
    branches:
      - master
      - dev
jobs:
  alpine:
    name: "alpine-3.13 [${{ matrix.compiler }}-10] [shared: ${{ matrix.build_shared_lib }}]"
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
      matrix:
        build_shared_lib: [on, off]
        compiler: [clang, gcc]
    steps:
      - uses: actions/checkout@v2
      - name: Build the Container
        run: |
          sudo docker build --build-arg build_shared_lib=${{ matrix.build_shared_lib }} \
                            -f docker/alpine/${{ matrix.compiler }}.Dockerfile \
                            --tag=xalwart.base-test:alpine-${{ matrix.compiler }} .
      - name: Run Tests
        run: |
          sudo docker run xalwart.base-test:alpine-${{ matrix.compiler }}
  ubuntu-clang:
    name: "${{ matrix.os }} [${{ matrix.compiler }}-${{ matrix.compiler_version }}] [shared: ${{ matrix.build_shared_lib }}]"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04]
        compiler_version: [10]
        compiler: [clang, gcc]
        build_shared_lib: [on, off]
    steps:
      - uses: actions/checkout@v2
      - name: "Install ${{ matrix.compiler }}-${{ matrix.compiler_version }}"
        if: ${{ matrix.compiler == 'clang' }}
        run: |
          sudo apt update -y && \
          sudo pip install --upgrade cmake && \
          sudo apt install -y ${{ matrix.compiler }}-${{ matrix.compiler_version }} valgrind
      - name: "Install ${{ matrix.compiler }}-${{ matrix.compiler_version }}"
        if: ${{ matrix.compiler == 'gcc' }}
        run: |
          sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test && \
          sudo apt update -y && \
          sudo pip install --upgrade cmake && \
          sudo apt install -y gcc-${{ matrix.compiler_version }} g++-${{ matrix.compiler_version }} valgrind && \
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-${{ matrix.compiler_version }} 10 && \
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-${{ matrix.compiler_version }} 10 && \
          sudo update-alternatives --install /usr/bin/cc cc /usr/bin/gcc 30 && \
          sudo update-alternatives --set cc /usr/bin/gcc && \
          sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/g++ 30 && \
          sudo update-alternatives --set c++ /usr/bin/g++
      - name: Build and Install Google Test Framework
        run: |
          git clone -q https://github.com/google/googletest.git && \
          sudo mkdir -p ./googletest/build && \
          cd ./googletest/build && \
          sudo cmake .. && \
          sudo make && \
          sudo make install
      - name: Build the Library and Tests
        run: |
          sudo mkdir build && \
          cd build/ && \
          sudo cmake -DCMAKE_BUILD_TYPE=Debug \
                     -DBUILD_SHARED_LIB=${{ matrix.build_shared_lib }} \
                     .. && \
          sudo make unittests-all
      - name: Run Tests
        run: |
          sudo valgrind --leak-check=full ./build/tests/unittests-all
